#!/usr/bin/env python
import os

import datetime
import rospy
import openpyxl  # excel
import openpyxl.styles
import openpyxl.styles.fills
import openpyxl.workbook
import openpyxl.utils.cell
import openpyxl.drawing.image
import rover_science.msg
import std_srvs.srv

rospy.init_node("excel_machine")
home = os.environ["HOME"]
if not os.path.exists(home + "/.urc"):
    os.mkdir(home + "/.urc")


def _gen_styles_for_sheet(book):
    font_h1 = openpyxl.styles.Font(name="Ubuntu",
                                   size=36,
                                   bold=True,
                                   color="FFFFFF")
    light_blue = openpyxl.styles.PatternFill(patternType=openpyxl.styles.fills.FILL_SOLID, start_color="9999FF",
                                             end_color="9999FF")
    dark_blue = openpyxl.styles.PatternFill(patternType=openpyxl.styles.fills.FILL_SOLID, start_color="3333FF",
                                            end_color="3333FF")
    header = openpyxl.styles.PatternFill(patternType=openpyxl.styles.fills.FILL_SOLID, start_color="009900",
                                         end_color="009900")
    data = openpyxl.styles.PatternFill(patternType=openpyxl.styles.fills.FILL_SOLID, start_color="00CCFF",
                                       end_color="00CCFF")
    font_h2 = openpyxl.styles.Font(name="Ubuntu",
                                   size=26,
                                   color="FFFFFF")
    font_first_header = openpyxl.styles.Font(name="Ubuntu",
                                             size=10.5,
                                             bold=True,
                                             color="FFFFFF")
    font_default = openpyxl.styles.Font(name="Ubuntu", size=10, color="FFFFFF")
    font_default_black = openpyxl.styles.Font(name="Ubuntu", size=10)

    s_h1 = openpyxl.styles.NamedStyle(name="sH1", font=font_h1, fill=light_blue)
    s_h2 = openpyxl.styles.NamedStyle(name="sH2", font=font_h2, fill=dark_blue)
    s_hF = openpyxl.styles.NamedStyle(name="sHF", font=font_first_header, fill=header)
    s_hA = openpyxl.styles.NamedStyle(name="sHA", font=font_default, fill=header)
    s_dW = openpyxl.styles.NamedStyle(name="sDW", font=font_default, fill=data)
    s_dB = openpyxl.styles.NamedStyle(name="sDB", font=font_default_black, fill=data)
    s_d1 = openpyxl.styles.NamedStyle(name="sD1", font=font_default, fill=light_blue)
    s_d2 = openpyxl.styles.NamedStyle(name="sD2", font=font_default, fill=dark_blue)
    book.add_named_style(s_h1)
    book.add_named_style(s_h2)
    book.add_named_style(s_hF)
    book.add_named_style(s_hA)
    book.add_named_style(s_dW)
    book.add_named_style(s_dB)
    book.add_named_style(s_d1)
    book.add_named_style(s_d2)


def _apply_style_range(cells, s):
    for cell2 in cells:
        for cell in cell2:
            cell.style = s


def _gen_title_page(ws, sites):
    _apply_style_range(ws["A1":"L3"], "sH1")
    ws["I2"].style = "sD1"
    time = datetime.datetime.now()
    ws["I2"] = "AutoGenerated on {0:%B} {0:%d} at {0:%I:%M%p}".format(time)
    ws["A1"] = "R3 Science Report"
    _apply_style_range(ws["A4:L6"], "sH2")
    ws["A4"] = "Site List"
    ws["F4"].style = "sD2"
    ws["F4"] = "See the other sheets for more info"
    d = []
    for site in sites:
        v = [site.site_name, 0, 0, 0, len(site.measurements)]
        l = v[4]
        if l == 0:
            l = 1
        v[1] = sum((x.location.longitude for x in site.measurements)) / float(l)
        v[2] = sum((x.location.latitude for x in site.measurements)) / float(l)
        v[3] = sum((x.location.altitude for x in site.measurements)) / float(l)
        d.append(v)
    _gen_header_table(ws, 7, ["Site Name", "Longitude", "Latitude", "Altitude (m)", "Measurements Taken"], 3, d)
    ws.column_dimensions["A"].width = 18.5
    ws.column_dimensions["B"].width = 10.5
    ws.column_dimensions["C"].width = 10.5
    ws.column_dimensions["D"].width = 10.5
    ws.row_dimensions[1].height = 40
    ws.row_dimensions[4].height = 40


def _gen_title(ws, title, comment=""):
    _apply_style_range(ws["A1:L3"], "sH1")
    ws["A1"] = title
    ws["F3"].style = "sD1"
    ws["F3"] = comment


def _value_or_no_data(measurement, value, value_value):
    if measurement.data_completeness & value == value:
        return str(value_value)
    else:
        return "<no data>"


def _gen_site_measurement_page(ws, site):
    _gen_title(ws, "{}.Measurements".format(site.site_name))
    d = []
    for measurement in site.measurements:
        v = [measurement.location.longitude, measurement.location.latitude, measurement.location.altitude,
             _value_or_no_data(measurement, measurement.HAS_PH, measurement.ph),
             _value_or_no_data(measurement, measurement.HAS_TEMP, measurement.temp),
             _value_or_no_data(measurement, measurement.HAS_HUMIDITY, measurement.humidity)]
        d.append(v)
    _gen_header_table(ws, 4, ["Longitude", "Latitude", "Altitude (m)", "PH", "Temperature (C)", "Humidity"], 0, d, "sHA")
    ws.column_dimensions["A"].width = 10.5
    ws.column_dimensions["B"].width = 10.5
    ws.column_dimensions["C"].width = 10.5
    ws.column_dimensions["D"].width = 5.5
    ws.column_dimensions["E"].width = 11.5
    ws.column_dimensions["F"].width = 11.5
    ws.row_dimensions[1].height = 40


def _gen_site_images_page(ws, site):
    _gen_title(ws, "{}.Images".format(site.site_name))
    ws["A5"] = "Panorama"
    ws.row_dimensions[1].height = 40
    ws["A70"] = "Closeup"
    if site.has_pano & site.HAS_PANO == site.HAS_PANO:
        i = openpyxl.drawing.image.Image(site.pano_location)
        ws.add_image(i, "A6")
    if site.has_pano & site.HAS_CLOSEUP == site.HAS_CLOSEUP:
        i = openpyxl.drawing.image.Image(site.closeup_location)
        ws.add_image(i, "A71")


def _gen_header_table(ws, header_row, header_values, overlap, data, first="sHF"):
    cells = ws[openpyxl.utils.cell.get_column_letter(1) + str(header_row):openpyxl.utils.cell.get_column_letter(
        len(header_values) + 1 + overlap) + str(header_row)]
    _apply_style_range(cells, "sHA")
    ws["A" + str(header_row)].style = first
    a = 1
    for v in header_values:
        ws[openpyxl.utils.cell.get_column_letter(a) + str(header_row)] = v
        a += 1
    a = header_row + 1
    for v in data:
        x = 1
        _apply_style_range(ws[openpyxl.utils.cell.get_column_letter(1) + str(a):openpyxl.utils.cell.get_column_letter(
            len(header_values) + 1 + overlap) + str(a)], "sDB")
        for i in v:
            ws[openpyxl.utils.cell.get_column_letter(x) + str(a)] = str(i)
            x += 1
        a += 1


def do_it(empty_ignored):
    sites = rospy.wait_for_message("/science/sites", rover_science.msg.Sites)
    rospy.loginfo("Generating excel file")
    book = openpyxl.workbook.Workbook()
    book.active.title = "Sites"
    _gen_styles_for_sheet(book)
    _gen_title_page(book.active, sites.sites)
    for site in sites.sites:
        ws_ = book.create_sheet("{}.Measurements".format(site.site_name))
        _gen_site_measurement_page(ws_, site)
        ws_ = book.create_sheet("{}.Images".format(site.site_name))
        _gen_site_images_page(ws_, site)
    book.save(home + "/.urc/science.xlsx")
    return std_srvs.srv.EmptyResponse()

rospy.Service("save_xlsx", std_srvs.srv.Empty, do_it)
rospy.spin()